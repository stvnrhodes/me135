m = new Maze()
// debugger;
c = new Cell(5,5,'N',m)
m.addWall(0,0,0,1)
assert(m.isWall(0,0,0,1), "Maze has wall")
assert(m.isWall(0,1,0,0), "Reversed: Maze has wall")
m.addEdge(0,0,1,0)
assert(m.isEdge(0,0,1,0), "Maze has connection")
assert(m.isEdge(1,0,0,0), "Reversed: Maze has connection")
m.addEdge(0,1,1,1);
m.addEdge(1,1,1,0);
m.getPath(0,0,0,1);
c.addWall('F')
c.addConnect('R')
assert(m.isWall(5,5,4,5), "Maze has wall in front of cell")
assert(m.isWall(4,5,5,5), "Reversed: Maze has wall in front of cell")
assert(m.isEdge(5,6,5,5), "Maze has connection to right of cell")
assert(m.isEdge(5,5,5,6), "Reversed: Maze has connection to right of cell")
c.addConnect('F')
c.addWall('R')
assert(!m.isWall(5,5,5,4), "Wall removed")
assert(!m.isWall(5,4,5,5), "Reversed: Wall removed")
assert(!m.isWall(5,5,6,5), "No Wall")
assert(!m.isWall(6,5,5,5), "Reversed: No Wall")
assert(m.isWall(5,6,5,5), "Wall added")
assert(m.isWall(5,5,5,6), "Reversed: Wall added")
assert(m.isExplored(5,5), "We've explored the cell")
assert(!m.isExplored(3,2), "We haven't explored cell 3,2")
c2 = new Cell(-2,-2,'E',m)
m.setExplored(10,12)
assert(m.isExplored(10,12), "We've explored cell 10,12")
assertEquals(m.getCorners(), [[-2,-2],[11,13]], "Boundaries are correct")
m2 = new Maze(m.getData())
assertEquals(m2.getCorners(), [[-2,-2],[11,13]], "Boundaries are correct for changed second maze")
m = new Maze()
m.addWall(4,7,4,6);
m.addWall(4,7,3,7);
assert(m.isWall(4,7,4,6), "Wall here")
assert(!m.isWall(4,6,5,6), "No Wall here")
assert(m.isWall(4,7,3,7), "Wall here")

m = new Maze()
c = new Cell(3,3,'N',m)
assertEquals([3,3,Cell.dirTable['N']],c.getData(), "Got coordinates correctly")
assert(m.isExplored(3,3), "We've explored the cell")
c.turn('r')
assertEquals([3,3,Cell.dirTable['E']],c.getData(), "Got coordinates correctly")
c.move(2)
assert(m.isExplored(3,3), "We've explored the cell")
assert(!m.isExplored(4,3), "We haven't explored the cell in between")
assert(m.isExplored(3,5), "We've explored the cell")
assertEquals([3,5,Cell.dirTable['E']],c.getData(), "Got coordinates correctly")
c.turn('l')
assertEquals([3,5,Cell.dirTable['N']],c.getData(), "Got coordinates correctly")
c.move(1)
assertEquals([2,5,Cell.dirTable['N']],c.getData(), "Got coordinates correctly")
c.turn('b')
assertEquals([2,5,Cell.dirTable['S']],c.getData(), "Got coordinates correctly")
m = new Maze()
m = new Maze(m.getData())
assertEquals(m.getCorners(), [[0,0],[1,1]], "Boundaries are correct")
m = new Maze()
c = new Cell(0, 0, 'N', m);
c.addConnect('L');
c.addConnect('R');
c.addWall('F');
assertEquals(m.getCorners(), [[-1,-1],[1,2]], "Boundaries are correct");