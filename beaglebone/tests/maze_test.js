m = new Maze(10,10)
c = new Cell(5,5,'N')
c.addWall('F', m)
c.addConnect('R', m)
assert(m.isWall([5,5],[5,4]), "Maze has wall in front of cell")
assert(m.isWall([5,4],[5,5]), "Reversed: Maze has wall in front of cell")
assert(!m.isWall([5,5],[5,6]), "Maze has connection to right of cell")
assert(!m.isWall([6,5],[6,5]), "Reversed: Maze has connection to right of cell")
c.addConnect('F', m)
// debugger;
c.addWall('R', m)
assert(!m.isWall([5,5],[4,5]), "Wall removed")
assert(!m.isWall([4,5],[5,5]), "Reversed: Wall removed")
assert(!m.isWall([5,5],[5,6]), "No Wall")
assert(!m.isWall([5,6],[5,5]), "Reversed: No Wall")
assert(m.isWall([6,5],[5,5]), "Wall added")
assert(m.isWall([5,5],[6,5]), "Reversed: Wall added")
assert(!m.isExplored(5,5), "We haven't explored the cell")
c_explore = new Cell(4,3,'S',m)
assert(m.isExplored(4,3), "We've explored cell 4,3")
assert(!m.isExplored(3,2), "We haven't explored cell 3,2")
m.setExplored(7,7)
assert(m.isExplored(7,7), "We've explored cell 7,7")
assertEquals(m.getCorners(), [[4,3],[7,7]], "Boundaries are correct")
m2 = new Maze(97, 99)
m2.setExplored(4,13)
m2.setExplored(71,36)
assertEquals(m2.getCorners(), [[4,13],[71,36]], "Boundaries are correct for second maze")
m2.changeMaze(m.getData())
assertEquals(m2.getCorners(), [[4,3],[7,7]], "Boundaries are correct for changed second maze")
m = new Maze(10,10)
m.addWall([4,7],[4,6]);
m.addWall([4,7],[3,7]);
assert(m.isWall([4,7],[4,6]), "Wall here")
assert(!m.isWall([4,6],[5,6]), "No Wall here")
assert(m.isWall([4,7],[3,7]), "Wall here")